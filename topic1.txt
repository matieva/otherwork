QUESTION 1
+ run this table
CREATE TABLE Products(
    ProductID int IDENTITY(1,1) NOT NULL PRIMARY KEY,
    ProductName nvarchar(100) NULL,
    UnitPrice decimal(18,2) NOT NULL,
    UnitsInStock int NOT NULL,
    UnitsOnOrder int NULL
)


+ this one is already stored
CREATE PROCEDURE InsertProduct
    @ProductName nvarchar(100),
    @UnitPrice decimal(18,2),
    @UnitsInStock int,
    @UnitsOnOrder int
AS
BEGIN
    INSERT INTO Products(ProductName, ProductPrice,ProductsInStock,ProductsOnOrder)
    VALUES (@ProductName, @UnitPrice, @UnitInStock, @UnitsOnOrder)
END 


+ procedure, contain programming statements that perform operations in the database, blant annet. prodecure ble gjort på forhånd. 

+ meet the following requirements:
    - insert product records as a single unit of work
    - return error number 51000 when a product fails to insert into the database. 
    - if a product record insert operation fails, the product information must not be permanently written to the database. 


+ solution
ALTER PROCEDURE InsertProduct
--- initially var det CREATE PROCEDURE. forskjell på ALTER og CREATE? fordelen med å bruke ALTER for å endre en lagret prosedyre er at den besvarer tilgnagstillatelser, mens CREATE gjør ikke det.
@ProductName nvarchar(100),
@UnitPrice decimal(18,2),
@UnitsInStock int,
@UnitsOnOrder int
--- hvilken type variabler er dette? 
AS
BEGIN 
--- begin prodecure ?
    SET XACT_ABORT ON 
    -- Specifies whether SQL Server automatically rolls back the current transaction when a Transact-SQL statement raises a run-time error.
    BEGIN TRY
        BEGIN TRANSACTION 
            INSERT INTO Procedure(ProductName, ProductPrice, ProductsInStock, ProductsOnOrder)
            VALUES (@ProductName, @UnitPrice, @UnitsInStock, @UnitsOnOrder)
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF XACT_STATE() <> 0 ROLLBACK TRANSACTION
        --- STACKOVERFLOW It turns out that transaction can not be committed from inside the CATCH block if XACT_ABORT is set to ON.
        THROW 51000, 'The product', 1
    END CATCH
END


MEET THE GOAL?
YES - single unit of work -> TRANSACTION/CATCH, error 51000, operation fails -> says ROLLOVER somewhere
NO - i dont know what IF XACT_ABORT() <> is an why it is in the CATCH block 

ANSWER: NO
+ with XACT_ABORT ON the INSERT INTO statement and the transaction will be rolled back when an error is raised, it would then not be possible to ROLLBACK it again in the
    IF XACT_STATE()<> 0 ROLLBACK TRANSACTION statement.
+ when a SET XACT_ABORT is ON, if a tsql statement raises a run-time error, the entire transaction is terminated and rolled back.
+ XACT_STATE is a scalar funtion that reports the user transaction state og a current running request.
+ XACT_STATE indicates whether the request has an active user transaction, and whether the transaction is capable of being committed.
+ states of XACT_STATE:
        + 0, there is no active user transaction for the current request
        + 1, the current request has an active user transaction. the request can perform any actions, including writing data and committing the transaction.
        + 2, the current request has an active user transaction, but an error has occured that has causeed the transaction to be classified as a uncommittable transaction











QUESTION2

+ created a table by running
CREATE TABLE Products(
    ProductID int IDENTITY(1,1) NOT NULL PRIMARY KEY,
    ProductName nvarchar(100) NULL,
    UnitPrice decimal(18,2) NOT NULL,
    UnitInStock int NOT NULL,
    UnitsOnOrder int Null

)


+ stored procedure
CREATE PROCEDURE InsertProduct
    @ProductName nvarchar(100),
    @UnitPrice decimal(18,2),
    @UnitInStock int, 
    @UnitsOnOrder int

AS 
BEGIN
    INSERT INTO Products (ProductName, ProductPrice, ProductsInStock, ProductsOnOrder)
    VALUES (@ProductName,@UnitPrice,@UnitsInStock, @UnitsOnOrder)
END

+ stored procedure meet the following requirements:
    - insert product records as a single unit of work
    - return error 51000
    - insert operation fails, not be permanently written to the database


+ solution
ALTER PROCEDURE InsertProduct
@ProductName nvarchar(100),
@UnitPrice decimal(18,2),
@UnitsInStock int, 
@UnitsOnOrder int
AS
BEGIN
    BEGIN TRY
        BEGIN TRANSACTION
            INSERT INTO Products(ProductName, ProductPrice, ProductsInStock, ProductsOnOrder)
            VALUES (@ProductName, @UnitPrice, @UnitInStock, @UnitsOnOrder)
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
            IF @@ERROR = 51000
                THROW
        END CATCH
END 


+ what is AS BEGIN END and when to use
+ transaction: BEGIN TRY END TRY BEGIN CATCH END CATCH
+ @@transcount, returns the number of BEGIN TRANSACTION statements that have occured on the current connection. 
    the BEGIN TRANSACTION statement increments @@TRANCOUNT by 1.ROLLBACK TRANSACTION decrements @@TRANCOUNT to 0, except for ROLLBACK TRANSACTION

YES: riktig syntax på ALTER PROCEDURE, TRY-CATCH
NO: feil syntax av @@trancount og ROLLBACK


ANSWER: NO
 + a TRANSACTION is correctly defined for the INSERT INTO VALUES statements, and if there is an error in the transaction it will be caught and the 
    transaction will be rolled back. However, error number 51000 will not be trturned, as it is only used in an IF @ ERROR = 51000 statement.
    ----- ikke fordi rollback står før 51000?
+ @@TRANCOUNT returns the number of BEGIN TRANSACTION statements that have occurred on the current connection.





QUESTION 3
+ run following table
CREATE TABLE Products (
    ProductID int IDENTITY (1,1), NOT NULL PRIMARY KEY,
    ProductName nvarchar(100) NULL,
    UnitPrice decimal(18,2) NOT NULL,
    UnitsInStock int NOT NULL,
    UnitsOnOrder int NULL
)

+ stored procedure
CREATE PROCEDURE InsertProduct
    @ProductName nvarchar(100),
    @UnitPrice decimal(18,2),
    @UnitsInStock int,
    @UnitsOnOrder int
AS
BEGIN
    INSERT INTO Products(ProductName, ProductPrice, ProductsInStock, ProductsOnOrder)
    VALUES (@ProductName, @UnitPrice, @UnitInStock, @UnitsOnOrder)
END

new requirements:
+ insert product records as a single unit of work
+ return error number 51000 when a product fails to insert into the database
+  operation fail, not write to the database

solution:
ALTER PROCEDURE InsertProduct
@ProductName nvarchar(100),
@UnitPrice decimal(18,2),
@UnitInStock int,
@UnitsOnOrder int
AS
BEGIN
    BEGIN TRY
        INSERT INTO Products(ProductName, ProductPrice, ProductsInStock, ProductsOnOrder)
            VALUES (@ProductName, @UnitPrice, @UnitInStock, @UnitsOnOrder)
    END TRY
    BEGIN CATCH
        THROW 51000, 'the product could not be created', 1
        END CATCH
END



+ ligger end catch på riktig plass? tab har vel ingenting å si. 
+ ser ingen andre feil

svar: YES, meet the goal





QUESTION 4

CREATE TABLE Customer (
    CustomerID  int IDENTITY(1,1) PRIMARY KEY,
    FirstName varchar(50) NULL, 
    LastName varchar(50) NOT NULL,
    DateOfBirth date NOT NULL,
    CreditLimit money CHECK(CreditLimit < 10000),
    TownID int NULL REFERENCE dbo.Town(TownID),
    CreatedDate datetime DEFAULT(Getdate())
)

oppgave: ensure both records are inserted rr neither record is inserted.

solution:
INSERT INTO Customer(FirstName, LastName, DateOfBirth, CreditLimit, CreatedDate)
VALUES('yvonne', 'mckay', '1984-05-25', 9000, GETDATE())
INSERT INTO Customer(FirstName, LastName, DateOfBirth, CreditLimit, CreatedDate)
VALUES('jossef', 'goldberg', '1995-06-03', 5500, GETDATE())
GO


answer: NO

BECAUSE:
+ how to insert one rows
    INSERT INTO InsertDemo 
        VALUES ('John','2000-08-12',5,'London','56896652')

+ how to insert multiple rows
    INSERT INTO InsertDemo 
        VALUES ('Jack','2000-02-10',5,'London','56552244'),
            ('Daniel','2000-07-24',5,'Oxford','56448899'), 
            ('Gonzalo','2000-01-13',5,'Cambridge','56254896')




QUESTION 5

CREATE TABLE Customer (
    CustomerID int INDENTITY(1,1) PRIMARY KEY,
    FirstName varchar(50) NULL,
    LastName varchar(50) NOT NULL,
    DateOfBirth date NOT NULL,
    CreditLimit money CHECK (CreditLimit < 10000),
    TownID int NULL REFERENCE DBO.tOWN(TownID),
    CreatedDate datetime DEFAULT(Getdate())
)

oppgave: ensure bith or neither are inserted.
- ser det med engang, helt lik oppgave 4.

1/41

QUESTION 6
YES, ser svaret. Lik 4 og 5


QUESTION 7
database that tracks orders and deliveries for customers in north america.
+ Sales.customers.
+ Application.Cities
+ Sales.CustomersCategories

oppgave: customer directory application. 
- App must list customers by the area code of their number. area code is first three characters of phone number
- main page based on an indexed view that contains the area and phone number for all customers.
- return from the PhoneNumber field


CREATE FUNCTION AreaCode(
    @phoneNumber nvarchar(20)
)
RETURNS
TABLE
WITH SCHEMABINDING
AS
RETURN (
    SELECT TOP 1 @phoneNumber as PhoneNumber, VALUE as AreaCode
    FROM STING_SPLIT(@PhoneNumber,'-')
)

+ SELECT TOP 1 @phoneNumber as PhoneNumber, VALUE as AreaCode
    VELG FØRSTE DEL AV @PhoneNumber SOM ER PhoneNumber, OG SETT FERDI SOM AreaCode
+ FROM STING_SPLIT(@PhoneNumber,'-')
    FRA PhoneNumber SOM ER SPITTET MED '-'


SCHEMABINDING: 
+ binds the view to the schema of the underlying table or tables.
+ when schemabinding is specified, the base table or tables cannot be modified in a way that would affect the view difinition. 
    la oss si du har tre tabeller, en endring vil da for eksempel være at du lager en til tabel som endrer view schema. dette kan ikke skje under schemabinding
+ VIEW SCHEMA DEFINES THE DESIGN OF THE DATABASE AT THE VIEW LEVEL OF THE DATA ABSTRACTION.
    IT DEFINES HOW AN END USER WILL INTERACT WITH THE DATABASE SYSTEM. GENERELL OPPSETT AV DATABASE.
+ the view definition itself must first be modified or dropped to remove dependencies on the table that is to be modified. 
+ when use schemabinding, select_statement must include the two-part names (schema.object) of tables, views or user-defined functions. 
+ must be same database. 
+ cannot be dropped if unless view is dropped or changed to no schema binding. 


just return a field...? possible but notes for PhoneNumber says does not allow new values. 
Are we adding a new value or create a new field?

SVAR: NO. BECAUSE IT SAYS RETURNS TABLE WITH ...


+The function should return nvarchar(10) and not a TABLE.

https://sqlserverguides.com/sql-server-function-return-table/
https://www.itexams.com/exam/70-761?





QUESTION 8
database that tracks orders and delieveries for customers in North America.
+ Sales.Customers 
+ Application.Cities 
+ Sales.CustomersCategories 

oppgave: list customers by the area code of their phone number. return the area code from the phonenumber field.



CREATE FUNCTION AreaCode (
    @PhoneNumber nvarchar(20)
)
RETURNS nvarchar(10)
AS
BEGIN
    DECLARE @areCode nvarchar(max)
    SELECT TOP 1 @AreaCode = VALUE FROM STRING_SPLIT(@phoneNumber, '-')
    RETURN @AreaCode
END



svar: NO
as the result of the function will be used in an indexed view we should use schemabinding. 

how do i know if it will be used in an indexed view? because the oppgave says:
The main page of the application will be based on an indexed view that contains the area and phone number of all costumers




QUESTION 9
database with
+ sales.customers
+ application.Cities
+ sales.CustomersCategories

oppgave: area code by phone number. the main page of the application will be based on an indexed view that contains the area and phone number for all customers. 
return the area code from the phonenumber field. 


CREATE FUNCTION AreaCode(
    @phoneNumber nvarchar(20)
)
RETURNS nvarchar(10)
WITH SCHEMABINDING
AS
BEGIN
    DECLARE @areaCode nvarchar(max)
    SELECT @areaCode = value FROM STRING_SPLIT(@phoneNumber, '-')
    return @areaCode
END



svar: NO
+ we need to SELECT TOP 1 @areaCode to ensure that only one value is returned.


QUESTION 10
+ to update tasks that are not yet started.
+ UPDATE Task SET StartTime = GETDATE() WHERE StartTime IS NULL
+ return the total count of tasks that are impacted by this UPDATE operation, but are not associated with a project.

- not associated with a project, excludere A & B. 

forskjell mellom C & D
C)
UPDATE Task SET StartTime = GETDATE() OUTPUT inserted.TaskId, INTO @startedTasks WHERE StartTime is NULL

D)
UPDATE Task SET StartTime = GETDATE() OUTPUT deleted.TaskId, INTO @startedTasks WHERE StartTime is NULL 


--ikke delete vel? bare å oppdatere
mitt svar: C FEIL 


RIKTIG SVAR : B.
DECLARE @startedTasks TABLE(TaskId int, ProjectId int)
UPDATE Task SET StartTime = GETDATE() OUTPUT deleted.TaskId, deleted.ProjectId INTO @startedTasks
WHERE StartTime is NULL
SELECT COUNT(*) FROM @startedTasks WHERE ProjectId IS NULL

+ because, the WHERE clause of the third line should be WHERE as we want to count the tasks that are not associated with a project.   




QUESTION 11
+ project table
+ task table

oppgave: you need to identify the owner of each task by using the following rules
+ return each tasks owner if the task has an owner
+ if task has no owner, but is associated with a project that has an owner, return the projects owner
+ return the value -1 fir all other cases. 

SELECT T.TaskId, T.TaskName, COALESCE (T.UserId, P.UserId, 1) AS OwnerUserId
FROM Task T RIGHT JOIN Project P ON T.ProjectId = P.ProjectId

coalesce - evaluates the arguments in order and returns the current value of the first expression that initially does not evaluate to NULL

(T.UserId, P.UserId, -1) 
+ return each tasks owner if the task has an owner
+ if a task has no owner, but is associated with a project that has an owner, return the projects owner. 
+ return the value -1 for all other cases   

!!! COALESCE (T.UserId, P.UserId, 1)  !!!

right join
+ returns all rows from the right table (table2), with the matching rows in the left table (table).
+ The result is NULL in the left side when there is no matching
+ here the right side could be NULL as the projectID of the task could be NULL




QUESTION 12
+ project table
+ task table

TASK LEVELIS DEFINED USING FOLLOWING RULES. 
tasks that have no parent task [task level] = 0
tasks that have a parent task [task level] = [parent task's level] + 1

oppgave: 
+ you need to determine the task level for each task in the hierarchy
+ which five tsql segments should you use to develop the solution? 

(tsql segments, bare tsql code. stokke om rekkefølgen)


)
SELECT * FROM TaskWithLevel

SELECT CAST (NULL AS int) AS ParentTaskId, T.TaskId, T.TaskName, 0 AS TaskLevel
FROM Task T WHERE T.ParentTaskId is NULL

With TaskWithLevel (ParentTaskId, TaskId, TaskName, TaskLevel) as( )

UNION


SELECT R.TaskId AS ParentTaskId, T.TaskId, T.TaskName, R.TaskLevel + 1 AS TaskLevel
FROM Task T INNER JOIN TaskWithLevel R ON T.ParentTaskId = R.TaskId 

SELECT T.TaskId AS ParentTaskId, CAST(null AS int) AS TaskId, T.TaskName, 0 AS TaskLevel FROM Task T WHERE T.ParentTaskIS NULL 


UNION ALL 


svar:
    With TaskWithLevel (ParentTaskId, TaskId, TaskName, TaskLevel) as (
    ########################################################################

    SELECT CAST (NULL AS int) AS ParentTaskId, T.TaskId, T.TaskName,
    0 AS TaskLevel
    FROM Task T WHERE T.ParentTaskId IS 
    NULL
    #########################################################################    
    UNION ALL
    #########################################################################
    SELECT R.TaskId AS ParentTaskId,
    T.TaskId, T.TaskName, R.TaskLevel + 1
    AS TaskLevel
    FROM Task T INNER JOIN TaskWithLevel
    R ON T.ParentTaskId = R.TaskId
    #########################################################################
    )
    SELECT * FROM TaskWithLevel



block 1
with common table expression specifies a temporary named result set, known as a common table expression.  CTE 

block 2
+ This statement selects all tasks with task level 0
+ the ParentTaskID could be null so we should use CAST(NULL AS INT) AS ParentTaskID 

block 3
In a Recurcive CTE Union ALL must be used. 

block 4
SELECT R.TaskId as ParentTaskId, TaskI






QUESTION13 

