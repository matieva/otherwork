
using System;
using System.Net;
using System.Net.Http;
using System.Web;
using System.Data; 
using System.Threading;
using System.ComponentModel;
using System.Threading.Tasks;
using System.Collections.Generic;
using System.Diagnostics; 
using System.Collections;

using Newtonsoft.Json;
using Newtonsoft.Json.Linq; 


using Appframe365.Web.Context;
using Appframe365.Web.RouteHandlers;
using Appframe365.Web.Registries.Attributes;
using Appframe365.Common;
using Appframe365.Common.Data;

namespace RouteHandlers 
{
    [Description("Retrives the json for each RoadObject of a spesific type")]
    [RouteUrl("api/NVDB/DistinctRoadObjects")]
    public class DistinctRoadObjects : AuthenticatedRouteHandlerBase {

        /*  Enable if needed  
            protected override bool RequireDeveloper { get { return true; } }
            protected override bool RequireTwoFactor { get { return true; } }
        */

        protected override async Task ProcessAuthenticatedAsync(RequestContext pContext, CancellationToken ct){
            pContext.Response.ContentType = "application/json";
            if(pContext.Request.HttpMethod != "GET")
                throw new HttpException((int)HttpStatusCode.MethodNotAllowed, "Method not allowed");
            

            ### paginering -> dele opp request slik at alt ikke kommer samtidig tar lang tid. for eksempel sider, 20 element pr side. 


            /* Your Code Here */   
            string url = "https://nvdbapiles-v2.atlas.vegvesen.no/vegobjekter/";
            ## definerer en tabell
            DataTable dt = new DataTable();
            ## for hva ? skjerm har id 3
            int roadObjectID = 3;
            ## for teller ?
            int num = 0;
            ## url til neste request, gitt fra api
            string nextUrl;
            ## sjekke n√•r finished
            bool finishied = false;
            

            ## legge til to kolonneer i databasen. 
            dt.Columns.Add("DistinctRoadObject_ID", typeof(int));
            dt.Columns.Add("JSON", typeof(string));

            string response = await GetRequest(url + roadObjectID);
            Debug.WriteLine(response, "api_response");
            
            JsonList results;
            results = JsonConvert.DeserializeObject<JsonList>(response);


            Debug.WriteLine(results.objekter[0].id,"api_results");
            Debug.WriteLine(results.metadata.returnert,"api_results");
            // Debug.WriteLine(results.metadata.neste.start,"api_results");
            // Debug.WriteLine(results.metadata.neste.href,"api_results");

            //test
            //foreach (JsonObject result in results.objekter)

            while(!finishied) {
                nextUrl = results.metadata.neste.href;
                Debug.WriteLine(nextUrl, "api_nextUrl");

                //test
                // int distinctRoadObjectID = results.objekter[0].id;
                // string distinctRoadObjectUrl = results.objekter[0].href;

                // var newRow = dt.NewRow();
                // newRow["DistinctRoadObject_ID"] = distinctRoadObjectID;

                // //Send get request to get all the distinct road objects of a disctinct roadobject type
                // string response2 = await GetRequest(distinctRoadObjectUrl);
                // //Debug.WriteLine(response2, "api_response2");

                // newRow["JSON"] = response2;
                // dt.Rows.Add(newRow);

                    //real
              foreach (JsonObject result in results.objekter)
              {
                  int distinctRoadObjectID = result.id;
                  string distinctRoadObjectUrl = result.href;

                  var newRow = dt.NewRow();
                  newRow["DistinctRoadObject_ID"] = distinctRoadObjectID;

                 //Send get request to get all the distinct road objects of a disctinct roadobject type
                  string response2 = await GetRequest(distinctRoadObjectUrl);
                  //Debug.WriteLine(response2, "api_response2");

                  newRow["JSON"] = response2;

                  dt.Rows.Add(newRow);

             }

                if (results.metadata.returnert < 250) {
                    finishied = true;
                    Debug.WriteLine(num, "api_num");
                } else {
                    response = await GetRequest(nextUrl);
                //Debug.WriteLine(response, "api_response9");
                
                results = JsonConvert.DeserializeObject<JsonList>(response);
                //Debug.WriteLine(results, "api_results9");
                num ++;
                }
                
            }



            
            Debug.WriteLine(dt.Rows.Count,"api_dt");

            UserContext.ForHttpContext(pContext).BulkInsert(dt, "atbv_NVDB_DistinktVegobjekter", 3600);

            await Task.FromResult(true); /* Change if needed to await other async method. */
        }

        public async Task<string> GetRequest (string url)
        {
            HttpClient httpClient = new HttpClient();

            try 
            {
                var httpResponse = await httpClient.GetAsync(url);
                string jsonResponse = await httpResponse.Content.ReadAsStringAsync();
                return jsonResponse;


            }
             catch (Exception e)
            {
                Console.WriteLine(e.Message);
                Debug.WriteLine(e, "error");
                return e.Message;
            }
        }
    }
    public class JsonList : JsonObject
    {
        public List<JsonObject> objekter { get; set; }
        public Metadata metadata { get; set; }
    }

    public class JsonObject 
    {
        public int id { get; set; }
        public string href {get; set; }
    } 
    public class Metadata
    {
        public int returnert { get; set; }
        public Neste neste { get; set; }
    }
    public class Neste 
    {
        public string start { get; set; }
        public string href { get; set; }
    }
}